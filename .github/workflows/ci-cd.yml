name: CI/CD
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # test:
  #   name: Test job
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: postgres
  #       ports: ['5432:5432']
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: Setup Ruby
  #       uses: actions/setup-ruby@v1
  #       with:
  #         ruby-version: 2.6.6
  #     - name: Build and run tests
  #       env:
  #         RAILS_ENV: test
  #         RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: postgres
  #         POSTGRES_HOST: localhost
  #         POSTGRES_PORT: 5432
  #         AWS_ACCESS_KEY_ID: AWS
  #         AWS_SECRET_ACCESS_KEY: AWS
  #       run: |
  #         sudo apt-get -yqq install libpq-dev
  #         gem install bundler -v 1.17.2
  #         bundle install --jobs 4 --retry 3
  #         bundle exec rails db:prepare
  #         bundle exec rspec

  deploy:
    name: Deploy job
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Authenticate into Google Cloud Platform
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_email: ${{ secrets.GCLOUD_EMAIL }}
          service_account_key: ${{ secrets.GCLOUD_AUTH }}

      # - name: Configure Cloud Run Service access
      #   run: gcloud run services add-iam-policy-binding --quiet --region=europe-west1 --member=allUsers --platform=managed --role=roles/run.invoker ${{ secrets.GCLOUD_APP_NAME }}

      # - name: Build Docker image
      #   run: |
      #     docker build . -f ./Dockerfile.prod --tag gcr.io/${{ secrets.GCLOUD_PROJECT }}/${{ secrets.GCLOUD_APP_NAME }}

      # - name: Configure Docker to use Google Cloud Platform
      #   run: "gcloud auth configure-docker --quiet"

      # - name: Push image to Google Cloud Container Registry
      #   run: docker push gcr.io/${{ secrets.GCLOUD_PROJECT }}/${{ secrets.GCLOUD_APP_NAME }}

      - name: Build and push image to Google Container Registry
        run: |-
          gcloud builds submit \
            --quiet \
            --tag "gcr.io/${{ secrets.GCLOUD_PROJECT }}/${{ secrets.GCLOUD_APP_NAME }}:$GITHUB_SHA"

      - name: Deploy to cloud run
        run: |-
          gcloud run deploy ${{ secrets.GCLOUD_APP_NAME }} \
                    --image=gcr.io/${{ secrets.GCLOUD_PROJECT }}/${{ secrets.GCLOUD_APP_NAME }}:$GITHUB_SHA \
                    --project=${{ secrets.GCLOUD_PROJECT }} \
                    --region=europe-west1 \
                    --allow-unauthenticated \
                    --platform=managed \
                    --port=4030
                    --memory=2Gi \
                    --set-env-vars=PORT=4030,RAILS_ENV=production,POSTGRES_USER=${{ secrets.POSTGRES_USER }},POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }},POSTGRES_HOST=${{ secrets.POSTGRES_HOST }},RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }},FASTMAIL_PASSWORD=${{ secrets.FASTMAIL_PASSWORD }},AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }},AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}